{"version":3,"sources":["UI/Input/Input.js","UI/Loader/Loader.js","containers/Form/Form.js","App.js","serviceWorker.js","index.js"],"names":["input","props","inputClasses","invalid","touched","htmlAttributes","value","push","react_default","a","createElement","className","label","Object","assign","join","loader","Form","state","loading","reqVat","reqVatValid","reqResult","error","formInputTouched","onSubmitHandler","event","preventDefault","_this","setState","query","axios","get","then","response","data","catch","inputChangedHandler","target","replace","isValid","trim","length","result","this","Valid","el","key","toString","Loader_Loader","onSubmit","Input_Input","type","placeholder","onChange","maxLength","disabled","Component","App","containers_Form_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.68ddc952.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Input.css';\r\n\r\nconst input = (props) => {\r\n    let inputClasses = [\"InputElement\"];\r\n    if(props.invalid && props.touched && props.htmlAttributes.value !== '') {\r\n        inputClasses.push(\"Invalid\");\r\n    }\r\n    const htmlAttributes = props.htmlAttributes;\r\n    return (\r\n        <div className=\"Input\">\r\n            <label className=\"Label\">{props.label}</label>\r\n            <input className={inputClasses.join(' ')} {...htmlAttributes}/>\r\n        </div>\r\n    );\r\n};\r\nexport default input;","import React from 'react';\r\n\r\nimport './Loader.css';\r\n\r\nconst loader = () => (\r\n    <div className=\"Loader\">Loading...</div>\r\n);\r\n\r\nexport default loader;","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\n\r\nimport Input from '../../UI/Input/Input';\r\nimport './Form.css';\r\nimport Loader from '../../UI/Loader/Loader';\r\n\r\nclass Form extends Component {\r\n    state = {\r\n        loading: false,\r\n        reqVat: '',\r\n        reqVatValid: false,\r\n        reqResult: null,\r\n        error: false,\r\n        formInputTouched: false\r\n    };\r\n\r\n    onSubmitHandler = (event) => {\r\n        if(event )event.preventDefault();\r\n        if(this.state.reqVatValid) {\r\n            this.setState({loading: true});\r\n            const query = 'https://vat.erply.com/numbers?vatNumber=' + this.state.reqVat;\r\n            axios.get(query)\r\n                .then(response => {\r\n                    this.setState({reqResult: response.data, loading: false, error: false});\r\n                })\r\n                .catch(error => {\r\n                   this.setState({reqResult: null, error: true, loading: false});\r\n                });\r\n        }\r\n    };\r\n\r\n    inputChangedHandler = (event) => {\r\n        this.setState({formInputTouched: true});\r\n        let reqVat = event.target.value;\r\n        reqVat = reqVat.replace(/\\s/g, \"\");\r\n        const reqVatValid = this.isValid(reqVat);\r\n        this.setState({reqVat: reqVat, reqVatValid: reqVatValid});\r\n    };\r\n\r\n    //assuming EU vat should be longer than 8 digits\r\n    isValid = (value) => {\r\n        return value.trim() !== '' && value.replace(/\\s/g, \"\").length > 7;\r\n    };\r\n\r\n    render() {\r\n        let result = [];\r\n        if (this.state.reqResult) {\r\n            if(this.state.reqResult.Valid) {\r\n                const response = this.state.reqResult;\r\n                result = [];\r\n                for (let el in response) {\r\n                    result.push(<p key={el}><strong>{el}</strong>: {response[el].toString()}</p>);\r\n                }\r\n            } else {\r\n                result = <p className=\"Error\">VAT does not exist or invalid VAT number.</p>\r\n            }\r\n        }\r\n        let error = null;\r\n        if (this.state.error) {\r\n            error = <p className=\"Error\">Error. Unable to get the result.</p>;\r\n        }\r\n        if(this.state.loading){\r\n            result = <Loader/>\r\n        }\r\n\r\n        return (\r\n            <form className=\"Form\" onSubmit={this.onSubmitHandler}>\r\n                <fieldset className=\"FormContainer\">\r\n                    <Input\r\n                        htmlAttributes={{\r\n                            type: \"text\",\r\n                            placeholder: \"VAT number\",\r\n                            onChange: this.inputChangedHandler,\r\n                            maxLength: \"20\",\r\n                            value: this.state.reqVat\r\n                        }}\r\n                        label=\"Enter VAT number to check\"\r\n                        invalid={!this.state.reqVatValid}\r\n                        touched={this.state.formInputTouched}\r\n                    />\r\n                    <button className=\"FormButton\" type=\"submit\" disabled={!this.state.reqVatValid}>CHECK</button>\r\n                </fieldset>\r\n\r\n                <fieldset className=\"FormContainer ResultContainer\">\r\n                    {result}\r\n                    {error}\r\n                </fieldset>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\n\nimport './App.css';\nimport Form from './containers/Form/Form';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Form />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}